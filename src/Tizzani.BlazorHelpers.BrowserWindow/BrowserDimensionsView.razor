@using System.Timers
@using Tizzani.BlazorHelpers.BrowserWindow.Services
@inject IBrowserWindowService WindowService
@implements IDisposable

@if (ChildContent != null && Dimensions != null)
{
    @ChildContent(Dimensions)
}

@code {
    private Timer DebounceTimer { get; set; } = new();
    private BrowserWindowDimensions? Dimensions { get; set; }

    [Parameter] public int Debounce { get; set; } = 300;
    [Parameter] public EventCallback<BrowserWindowDimensions> OnResize { get; set; }
    [Parameter] public RenderFragment<BrowserWindowDimensions>? ChildContent { get; set; }

    public void Dispose()
    {
        BrowserResizeListener.OnResize -= ResetTimer;
        DebounceTimer.Dispose();
    }

    protected override void OnInitialized()
    {
        BrowserResizeListener.OnResize += ResetTimer;

        DebounceTimer.Interval = Debounce;
        DebounceTimer.AutoReset = false;
        DebounceTimer.Elapsed += LoadDimensions;
    }

    protected override Task OnInitializedAsync()
    {
        return LoadDimensions();
    }

    protected override void OnParametersSet()
    {
        if (Debounce < 10)
            Debounce = 10;

        if (DebounceTimer.Interval != Debounce)
            DebounceTimer.Interval = Debounce;
    }

    private ValueTask ResetTimer()
    {
        DebounceTimer.Stop();
        DebounceTimer.Start();

        return ValueTask.CompletedTask;
    }

    private async Task LoadDimensions()
    {
        Dimensions = await WindowService.GetDimensions();

        if (OnResize.HasDelegate)
            await OnResize.InvokeAsync(Dimensions);
    }

    private async void LoadDimensions(object? source, ElapsedEventArgs e)
    {
        await LoadDimensions();
        await InvokeAsync(StateHasChanged);
    }
}